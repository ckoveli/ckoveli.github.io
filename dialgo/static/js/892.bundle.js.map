{"version":3,"file":"static/js/892.bundle.js","mappings":"4mBAOe,SAASA,IACpB,I,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQH,QAAQ,IAExDI,IADsBH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQE,mBAAmB,KACjEC,EAAAA,EAAAA,OACyCC,G,GAAxBC,EAAAA,EAAAA,UAASR,EAAS,GAAGS,I,EAAG,E,unBAAnDC,EAASH,EAAA,GAAEI,EAAYJ,EAAA,GAExBK,EAAgB,SAAAH,GAAE,OAAIT,EAASa,WAAU,SAAAV,GAAO,OAAIA,EAAQM,KAAOA,CAAE,GAAC,GAE5EK,EAAAA,EAAAA,YAAU,WACFd,EAASe,OAAS,EAClBJ,EAAaX,EAASA,EAASe,OAAS,GAAGN,IAE3CE,EAAaX,EAAS,GAAGS,GAEjC,GAAG,CAACT,IAEJ,IA2BMgB,EAAa,SAAAP,GAAE,OAAI,SAACQ,EAACC,GAAe,IAAXC,EAACD,EAADC,EACrBC,GADyBF,EAADG,EAChBrB,EAASa,WAAU,SAACV,GAAO,OAAKA,EAAQM,KAAOA,CAAE,KACzDa,EAhBkB,SAACF,EAAOD,GAChC,IAAIG,EAAcF,EACVG,EAAUC,SAASC,cAAc,SAASC,wBAA1CH,MACFI,EAAUR,EAAII,EAAQvB,EAASe,OAAS,EAQ9C,OANIY,EAAUJ,EACVD,EAActB,EAASe,OAAS,EACzBY,EAAU,IACjBL,EAAcM,KAAKC,MAAMF,GAAWJ,EAAQvB,EAASe,UAGlDO,CACX,CAIwBQ,CAAoBV,EAAOD,GAE/C,GAAIG,IAAgBF,EAAO,CACvB,IAAMW,E,yWAAQC,CAAOhC,GAOrB,OALA+B,EAASE,OAAOb,EAAO,GACvBW,EAASE,OAAOX,EAAa,EAAGtB,EAASoB,IAEzCT,EAAaF,GAENsB,CACX,CACJ,CAAC,EAED,OACIG,EAAAA,cAACC,EAAAA,GAAG,CAACC,MAAI,EAACC,UAAU,QACfrC,EAASsC,KAAI,SAAAnC,GAAO,OACjB+B,EAAAA,cAACK,IAAS,CACNC,IAAKrC,EAAQM,GACbgC,KAAK,IACLC,OAAQ1B,EAAWb,EAAQM,IAC3BkC,SAAU,CAAExB,EAAG,EAAGE,EAAG,IAErBa,EAAAA,cAACU,EAAAA,GAAO,KACJV,EAAAA,cAACW,EAAAA,GAAO,CACJR,UAAWS,IAAW,CAAEC,OAAQrC,IAAcP,EAAQM,KACtDuC,QAAS,kBAvDfvC,EAuD+BN,EAAQM,GAtDrDE,EAAaF,QACbL,GAAS6C,EAAAA,EAAAA,IAAuBrC,EAAcH,KAFhC,IAAAA,CAuD0C,EACpCyC,cAAe,kBAAM9C,GAAS+C,EAAAA,EAAAA,GAAY,QAAQ,GAElDjB,EAAAA,cAAA,QAAMG,UAAU,iBAAiBlC,EAAQiD,KAAK,OAC9ClB,EAAAA,cAACmB,EAAAA,GAAM,CACHC,OAAK,EACLjB,UAAU,OACVW,QAAS,kBA1DpBvC,EA0DmCN,EAAQM,GAzDxDL,GAASmD,EAAAA,EAAAA,IAAc9C,SAEnBC,IAAcD,GAAMG,EAAcH,IAAO,IACzCL,GAAS6C,EAAAA,EAAAA,IAAuBrC,EAAcH,GAAM,IACpDE,EAAaX,EAASY,EAAcH,GAAM,GAAGA,MALpC,IAAAA,CA0D8C,MAIvC,IAI5B,C","sources":["webpack://dialgo/./src/components/Tabs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCurrentProjectIndex, removeProject, updateModal } from \"../projectSlice\";\nimport { Nav, NavItem, NavLink, TabContent, TabPane, Button } from \"reactstrap\";\nimport classnames from \"classnames\";\nimport Draggable from \"react-draggable\";\n\nexport default function Tabs() {\n    const projects = useSelector((state) => state.project.projects);\n    const currentProjectIndex = useSelector(state => state.project.currentProjectIndex);\n    const dispatch = useDispatch();\n    const [activeTab, setActiveTab] = useState(projects[0].id);\n\n    const findIndexById = id => projects.findIndex(project => project.id === id);\n\n    useEffect(() => {\n        if (projects.length > 1) {\n            setActiveTab(projects[projects.length - 1].id);\n        } else {\n            setActiveTab(projects[0].id);\n        }\n    }, [projects]);\n\n    const toggleTab = id => {\n        setActiveTab(id);\n        dispatch(setCurrentProjectIndex(findIndexById(id)));\n    };\n    const closeTab = id => {\n        dispatch(removeProject(id));\n\n        if (activeTab === id && findIndexById(id) >= 1) {\n            dispatch(setCurrentProjectIndex(findIndexById(id) - 1));\n            setActiveTab(projects[findIndexById(id) - 1].id);\n        }\n    };\n\n    const findIndexByPosition = (index, x) => {\n        let targetIndex = index;\n        const { width } = document.querySelector(\".tabs\").getBoundingClientRect();\n        const middleX = x + width / projects.length / 2;\n\n        if (middleX > width) {\n            targetIndex = projects.length - 1;\n        } else if (middleX > 0) {\n            targetIndex = Math.floor(middleX / (width / projects.length));\n        }\n        \n        return targetIndex;\n    };\n\n    const handleDrag = id => (e, { x, y }) => {\n        const index = projects.findIndex((project) => project.id === id);\n        const targetIndex = findIndexByPosition(index, x);\n\n        if (targetIndex !== index) {\n            const newArray = [...projects];\n\n            newArray.splice(index, 1);\n            newArray.splice(targetIndex, 0, projects[index]);\n\n            setActiveTab(id)\n\n            return newArray;\n        }\n    };\n\n    return (\n        <Nav tabs className=\"tabs\">\n            {projects.map(project => (\n                <Draggable\n                    key={project.id}\n                    axis=\"x\"\n                    onStop={handleDrag(project.id)}\n                    position={{ x: 0, y: 0 }}\n                >\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: activeTab === project.id })}\n                            onClick={() => toggleTab(project.id)}\n                            onDoubleClick={() => dispatch(updateModal(\"name\"))}\n                        >\n                            <span className=\"text-truncate\">{project.name}.da</span>\n                            <Button\n                                close\n                                className=\"ml-2\"\n                                onClick={() => closeTab(project.id)}\n                            />\n                        </NavLink>\n                    </NavItem>\n                </Draggable>\n            ))}\n        </Nav>\n    );\n}\n"],"names":["Tabs","projects","useSelector","state","project","dispatch","currentProjectIndex","useDispatch","_useState2","useState","id","activeTab","setActiveTab","findIndexById","findIndex","useEffect","length","handleDrag","e","_ref","x","index","y","targetIndex","width","document","querySelector","getBoundingClientRect","middleX","Math","floor","findIndexByPosition","newArray","_toConsumableArray","splice","React","Nav","tabs","className","map","Draggable","key","axis","onStop","position","NavItem","NavLink","classnames","active","onClick","setCurrentProjectIndex","onDoubleClick","updateModal","name","Button","close","removeProject"],"sourceRoot":""}