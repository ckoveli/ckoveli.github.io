{"version":3,"file":"static/js/961.bundle.js","mappings":"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","sources":["webpack://dialgo/./src/components/modal/Project.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addProject, setCurrentProjectIndex } from \"../../projectSlice\";\nimport { \n    Col,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button\n} from \"reactstrap\";\n\nexport default function Project({ closeModal }) {\n    const papers = [\n        {\n            size: \"A3\",\n            width: 297,\n            height: 420,\n            unit: \"mm\"\n        },\n        {\n            size: \"A4\",\n            width: 210,\n            height: 297,\n            unit: \"mm\"\n        },\n        {\n            size: \"A5\",\n            width: 148,\n            height: 210,\n            unit: \"mm\"\n        },\n        {\n            size: \"B3\",\n            width: 353,\n            height: 500,\n            unit: \"mm\"\n        },\n        {\n            size: \"B4\",\n            width: 250,\n            height: 353,\n            unit: \"mm\"\n        },\n        {\n            size: \"B5\",\n            width: 176,\n            height: 250,\n            unit: \"mm\"\n        },\n    ]\n    \n    function generateID(length) {\n        let result = \"\";\n        const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\";\n        const charactersLength = characters.length;\n    \n        for (let i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n    \n        return result;\n    }\n\n    const projects = useSelector(state => state.project.projects);\n    const currentProjectIndex = useSelector(state => state.project.currentProjectIndex);\n    const [projectData, setProjectData] = useState({\n        id: null,\n        name: \"New Project\",\n        width: window.innerWidth.toString(),\n        height: window.innerHeight.toString(),\n        unit: \"px\",\n        scale: null\n    });\n    const dispatch = useDispatch();\n\n    const updateProjectData = data => {\n        setProjectData({\n            ...projectData,\n            name: data.name || projectData.name,\n            width: data.width || projectData.width,\n            height: data.height || projectData.height,\n            unit: data.unit || projectData.unit,\n        });\n    }\n\n    const handleChange = e => {\n        setProjectData({\n            ...projectData,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    const createProject = e => {\n        e.preventDefault();\n\n        const { name, width, height, unit } = e.target;\n\n        let canvasWidthPx, canvasHeightPx, canvasScale;\n\n        switch (unit.value) {\n            case \"px\":\n                canvasWidthPx = width.value;\n                canvasHeightPx = height.value;\n                break;\n\n            case \"cm\":\n                const cmToPxRatio = 37.8; // assuming 96 dpi\n                canvasWidthPx = width.value * cmToPxRatio;\n                canvasHeightPx = height.value * cmToPxRatio;\n                break;\n\n            case \"mm\":\n                const mmToPxRatio = 3.78; // assuming 96 dpi\n                canvasWidthPx = width.value * mmToPxRatio;\n                canvasHeightPx = height.value * mmToPxRatio;\n                break;\n\n            case \"in\":\n                const inToPxRatio = 96; // assuming 96 dpi\n                canvasWidthPx = width.value * inToPxRatio;\n                canvasHeightPx = height.value * inToPxRatio;\n                break;\n\n            default:\n                console.error(\"Invalid unit: \", unit);\n                canvasWidthPx = width.value;\n                canvasHeightPx = height.value;\n        }\n\n        const screenWidth = window.innerWidth;\n        const screenHeight = window.innerHeight;\n        const canvasAspectRatio = canvasWidthPx / canvasHeightPx;\n        const screenAspectRatio = screenWidth / screenHeight;\n\n        if (canvasAspectRatio > screenAspectRatio) {\n            canvasScale = screenWidth / canvasWidthPx;\n        } else {\n            canvasScale = screenHeight / canvasHeightPx;\n        }\n\n        const canvaScale = Math.round(canvasScale * 100);\n\n        dispatch(\n            addProject({\n                id: generateID(6),\n                name: name.value,\n                width: width.value,\n                height: height.value,\n                unit: unit.value,\n                scale: canvasScale,\n                position: {\n                    top: \"50%\",\n                    left: \"50%\",\n                }\n            })\n        );\n        dispatch(setCurrentProjectIndex(projects.length));\n\n        closeModal();\n    }\n    return (\n        <>\n            <Col md=\"8\">\n                <div className=\"paper-container\">\n                    {papers.map((paper, index) =>\n                        <div key={index} className=\"paper\" onClick={() => updateProjectData({width: paper.width, height: paper.height, unit: paper.unit})}>\n                            <div className=\"outline\" style={{\n                                width: `${paper.width/5}px`,\n                                height: `${paper.height/5}px`\n                            }} />\n                            {paper.size}\n                            <p className=\"small muted\">{paper.width} X {paper.height} {paper.unit}</p>\n                        </div>\n                    )}\n                </div>\n            </Col>\n            <Col md=\"4\">\n                <Form onSubmit={createProject}>\n                    <FormGroup row>\n                        <Col>\n                            <Label>Name</Label>\n                            <Input type=\"text\" name=\"name\" value={projectData.name} onChange={handleChange} />\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col>\n                            <Label>Width</Label>\n                            <Input type=\"text\" name=\"width\" value={projectData.width} onChange={handleChange} />\n                        </Col>\n                        <Col>\n                            <Label>Unit</Label><br/>\n                            <select name=\"unit\" value={projectData.unit} onChange={handleChange}>\n                                <option>px</option>\n                                <option>cm</option>\n                                <option>mm</option>\n                                <option>in</option>\n                            </select>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col>\n                            <Label>Height</Label>\n                            <Input type=\"text\" name=\"height\" value={projectData.height} onChange={handleChange} />\n                        </Col>\n                        <Col>\n                            <br/><Button color=\"secondary\" onClick={() => updateProjectData({width: projectData.height, height: projectData.width})}>&#8645;</Button>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col>\n                            <Button\n                                type=\"submit\"\n                                className=\"w-100\" \n                                color=\"primary\"\n                            >\n                                Create\n                            </Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            </Col>\n        </>\n    );\n}"],"names":["Project","_ref","closeModal","generateID","length","result","characters","charactersLength","i","charAt","Math","floor","random","projects","useSelector","state","project","_useState2","currentProjectIndex","useState","id","name","width","window","innerWidth","toString","height","innerHeight","unit","scale","projectData","setProjectData","dispatch","useDispatch","updateProjectData","data","_objectSpread","handleChange","e","_defineProperty","target","value","React","Col","md","className","size","map","paper","index","key","onClick","style","concat","Form","onSubmit","preventDefault","canvasWidthPx","canvasHeightPx","canvasScale","_e$target","console","error","screenWidth","screenHeight","round","addProject","position","top","left","setCurrentProjectIndex","FormGroup","row","Label","Input","type","onChange","Button","color"],"sourceRoot":""}